
public class Dog extends Animal {
	
	Dog(String name) {
		
		// 부모 생성자 실행 (부모 객체를 생성하기 위해 호출)
		// 이 코드에선 Animal 클래스에 생성자가 아무것도 없기 때문에 기본생성자가 자동으로 생성된다.
		// 그리고 부모 클래스에 기본생성자가 있으면 자식 클래스에 super();를 안써도 자동으로 호출된다.
		super();
		
		// super = this
		// super : 부모 클래스 접근, 부모 클래스 Animal의 name에 명시적 접근
		// this : 자기 클래스 접근, 현재 클래스 Dog의 name (상속받은 name도 포함)
		// 부모와 자식 클래스에 같은 이름의 필드가 있을 경우 다르게 작동한다.
		super.name = name;
		
		System.out.println("강아지가 만들어졌습니다. -> 이름 : " + name);
		
	}

}

// 상속 : 부모의 필드, 메서드를 내 것처럼 자동으로 갖게 되는 것
// 호출 : 부모의 생성자를 직접 불러서 실행하는 것

// 상속
// 생성자는 상속되지 않는다. (생성자는 객체를 만들기 위한 특별한 메서드이므로 그대로 물려줄 수 없다.)
// 자식 객체 생성시 부모 객체도 자동으로 생성되어야 하므로, 자식 생성자 안에서 super()로 명시적 호출

// super();
// 부모 클래스에 기본 생성자만 존재하면, 자식 클래스에서 생략 가능 (자동호출로 인해)
// 부모 클래스에 기본 생성자가 없으면, 자식 클래스에서 super()를 쓰지 못하므로 super(값)으로 존재하는 생성자 호출

// 자식 클래스에는 무조건 부모의 기본생성자가 있어야 되진 않는다.
// 따라서 자식 클래스에서 super();를 쓸 일이 거의 없다.

// 자바에서는 기본 생성자를 자동으로 생성 -> 하지만 눈에 보이진 않는다.
// 다른 생성자를 만든 경우, 기본 생성자가 사라지므로 기본 생성자를 만들어줘야 한다.
